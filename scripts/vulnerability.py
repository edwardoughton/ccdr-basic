"""
Vulnerability analysis code.

Written by Ed Oughton.

May 4th 2022

"""
import os
import configparser
# import random
import json
# import glob
# import numpy as np
import pandas as pd
import geopandas as gpd
import rasterio
from rasterio.mask import mask
# from rasterio import features
# from tqdm import tqdm
from shapely.geometry import shape#, Point, Polygon, mapping, LineString, MultiPolygon
# from rasterstats import zonal_stats
# import math
# import pyproj
# from shapely.ops import transform

# from prop import get_sinr
from misc import get_countries, process_country_shapes, process_regions #, get_regions, get_scenarios, params, technologies,

CONFIG = configparser.ConfigParser()
CONFIG.read(os.path.join(os.path.dirname(__file__), 'script_config.ini'))
BASE_PATH = CONFIG['file_locations']['base_path']

DATA_RAW = os.path.join(BASE_PATH, 'raw')
DATA_PROCESSED = os.path.join(BASE_PATH, 'processed')


def process_inuncoast(country):
    """
    Process coastal flooding.

    """
    iso3 = country['iso3']

    filename = 'inuncoast_rcp8p5_wtsub_2080_rp1000_0_perc_50.tif'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inuncoast')
    if not os.path.exists(folder):
        os.makedirs(folder)
    path_out = os.path.join(folder, filename)

    if os.path.exists(path_out):
        return

    path = os.path.join(DATA_RAW, 'flood_hazard', filename)

    hazard = rasterio.open(path, 'r+')
    hazard.nodata = 255
    hazard.crs.from_epsg(4326)

    iso3 = country['iso3']
    path_country = os.path.join(DATA_PROCESSED, iso3,
        'national_outline.shp')

    if os.path.exists(path_country):
        country = gpd.read_file(path_country)
    else:
        print('Must generate national_outline.shp first' )

    geo = gpd.GeoDataFrame({'geometry': country.geometry})

    coords = [json.loads(geo.to_json())['features'][0]['geometry']]

    out_img, out_transform = mask(hazard, coords, crop=True)
    out_meta = hazard.meta.copy()
    out_meta.update({"driver": "GTiff",
                    "height": out_img.shape[1],
                    "width": out_img.shape[2],
                    "transform": out_transform,
                    "crs": 'epsg:4326'})

    with rasterio.open(path_out, "w", **out_meta) as dest:
            dest.write(out_img)

    return


def extract_inuncoast(country):
    """
    Extract coastal flooding.

    """
    iso3 = country['iso3']

    filename = 'inuncoast_rcp8p5_wtsub_2080_rp1000_0_perc_50.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inuncoast')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path_out = os.path.join(folder, filename)

    # if os.path.exists(path_out):
    #     return

    filename = 'national_outline.shp'
    folder = os.path.join(DATA_PROCESSED, iso3)
    path = os.path.join(folder, filename)
    national_outline = gpd.read_file(path, crs='epsg:4326')

    filename = 'inuncoast_rcp8p5_wtsub_2080_rp1000_0_perc_50.tif'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inuncoast')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path = os.path.join(folder, filename)

    with rasterio.open(path) as src:

        affine = src.transform
        array = src.read(1)#[:1]

        output = []

        for vec in rasterio.features.shapes(array):

            if vec[1] > 0 and not vec[1] == 255:

                coordinates = [i for i in vec[0]['coordinates'][0]]

                coords = []

                for i in coordinates:

                    x = i[0]
                    y = i[1]

                    x2, y2 = src.transform * (x, y)

                    coords.append((x2, y2))

                output.append({
                    'type': vec[0]['type'],
                    'geometry': {
                        'type': 'Polygon',
                        'coordinates': [coords],
                    },
                    'properties': {
                        'value': vec[1],
                    }
                })

        if len(output) == 0:
            return

        output = gpd.GeoDataFrame.from_features(output, crs='epsg:4326')
        output.to_file(path_out, driver='ESRI Shapefile')

    return


def process_cyclones(country):
    """
    Process cyclone tracks.

    """
    iso3 = country['iso3']

    filename = 'IBTrACS.since1980.list.v04r00.lines.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'cyclones')
    if not os.path.exists(folder):
        os.makedirs(folder)
    path_out = os.path.join(folder, filename)

    if os.path.exists(path_out):
        return

    filename = 'IBTrACS.since1980.list.v04r00.lines.shp'
    folder = os.path.join(DATA_RAW, 'noaa_cyclones', 'IBTrACS.since1980.list.v04r00.lines')
    path = os.path.join(folder, filename)
    hazard = gpd.read_file(path, crs='epsg:4326')

    filename = 'national_outline.shp'
    folder = os.path.join(DATA_PROCESSED, iso3)
    path = os.path.join(folder, filename)
    national_outline = gpd.read_file(path, crs='epsg:4326')
    national_outline['geometry'] = national_outline['geometry'].buffer(2)

    try:
        hazard = gpd.overlay(hazard, national_outline, how='intersection')
        if len(hazard) == 0:
            print('No historical cyclone tracks intersect {}!'.format(iso3))
    except:
        print('Cyclone overlay was not carried out')
        return

    if len(hazard) > 0:
        hazard.to_file(path_out, crs='epsg:4326')

    return


def process_droughts(country):
    """
    Process drought / water stress.

    """
    iso3 = country['iso3']

    filename = 'aqueduct_projections_20150309.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'droughts')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path_out = os.path.join(folder, filename)

    if os.path.exists(path_out):
        return

    filename = 'aqueduct_projections_20150309.shp'
    folder = os.path.join(DATA_RAW, 'aquaduct_water_stress')
    path = os.path.join(folder, filename)
    hazard = gpd.read_file(path, crs='epsg:4326')

    filename = 'national_outline.shp'
    folder = os.path.join(DATA_PROCESSED, iso3)
    path = os.path.join(folder, filename)
    national_outline = gpd.read_file(path, crs='epsg:4326')

    hazard = gpd.overlay(hazard, national_outline, how='intersection')

    if len(hazard) > 0:
        hazard.to_file(path_out, crs='epsg:4326')

    return


def process_landslides(country):
    """
    Process river flooding.

    """
    iso3 = country['iso3']

    filename = 'ls_arup.tif'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'landslide')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path_out = os.path.join(folder, filename)

    # if os.path.exists(path_out):
    #     return

    path = os.path.join(DATA_RAW, 'global_landslide_hazard', filename)

    hazard = rasterio.open(path, 'r+')
    hazard.nodata = 255
    hazard.crs.from_epsg(4326)

    iso3 = country['iso3']
    path_country = os.path.join(DATA_PROCESSED, iso3,
        'national_outline.shp')

    if os.path.exists(path_country):
        country = gpd.read_file(path_country)
    else:
        print('Must generate national_outline.shp first' )

    geo = gpd.GeoDataFrame({'geometry': country.geometry})
    coords = [json.loads(geo.to_json())['features'][0]['geometry']]

    out_img, out_transform = mask(hazard, coords, crop=True)
    out_meta = hazard.meta.copy()
    out_meta.update({"driver": "GTiff",
                    "height": out_img.shape[1],
                    "width": out_img.shape[2],
                    "transform": out_transform,
                    "crs": 'epsg:4326'})

    with rasterio.open(path_out, "w", **out_meta) as dest:
            dest.write(out_img)

    return


def extract_landslides(country):
    """
    Extract coastal flooding.

    """
    iso3 = country['iso3']

    filename = 'ls_arup.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'landslide')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path_out = os.path.join(folder, filename)

    # if os.path.exists(path_out):
    #     return

    filename = 'national_outline.shp'
    folder = os.path.join(DATA_PROCESSED, iso3)
    path = os.path.join(folder, filename)
    national_outline = gpd.read_file(path, crs='epsg:4326')

    filename = 'ls_arup.tif'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'landslide')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path = os.path.join(folder, filename)

    with rasterio.open(path) as src:

        affine = src.transform
        array = src.read(1)#[:1]

        output = []

        for vec in rasterio.features.shapes(array):

            if vec[1] >= 3 and not vec[1] == 255:

                coordinates = [i for i in vec[0]['coordinates'][0]]

                coords = []

                for i in coordinates:

                    x = i[0]
                    y = i[1]

                    x2, y2 = src.transform * (x, y)

                    coords.append((x2, y2))

                output.append({
                    'type': vec[0]['type'],
                    'geometry': {
                        'type': 'Polygon',
                        'coordinates': [coords],
                    },
                    'properties': {
                        'Risk': str(vec[1]),
                    }
                })

        output = gpd.GeoDataFrame.from_features(output, crs='epsg:4326')
        output.to_file(path_out, driver='ESRI Shapefile')

    return


def process_inunriver(country):
    """
    Process river flooding.

    """
    iso3 = country['iso3']

    models = [
        '00000NorESM1-M',
        '0000GFDL-ESM2M',
        '0000HadGEM2-ES',
        '00IPSL-CM5A-LR',
        'MIROC-ESM-CHEM',
    ]

    for model in models:

        my_files = [
            ('inunriver_rcp8p5_{}_2080_rp01000.tif'.format(model)),
            ('inunriver_rcp8p5_{}_2080_rp00100.tif'.format(model)),
            ('inunriver_rcp8p5_{}_2080_rp00050.tif'.format(model)),
            ('inunriver_rcp8p5_{}_2080_rp00025.tif'.format(model))
        ]

        for my_file in my_files:

            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inunriver')
            if not os.path.exists(folder):
                os.mkdir(folder)
            path_out = os.path.join(folder, my_file)

            if os.path.exists(path_out):
                continue

            path = os.path.join(DATA_RAW,'flood_hazard', my_file)

            hazard = rasterio.open(path, 'r+')
            hazard.nodata = 255
            hazard.crs.from_epsg(4326)

            path_country = os.path.join(DATA_PROCESSED, iso3,
                'national_outline.shp')

            if os.path.exists(path_country):
                country = gpd.read_file(path_country)
            else:
                print('Must generate national_outline.shp first' )

            geo = gpd.GeoDataFrame({'geometry': country.geometry})
            coords = [json.loads(geo.to_json())['features'][0]['geometry']]

            out_img, out_transform = mask(hazard, coords, crop=True)
            out_meta = hazard.meta.copy()
            out_meta.update({"driver": "GTiff",
                            "height": out_img.shape[1],
                            "width": out_img.shape[2],
                            "transform": out_transform,
                            "crs": 'epsg:4326'})

            with rasterio.open(path_out, "w", **out_meta) as dest:
                    dest.write(out_img)

    return


def extract_inunriver(country):
    """
    Extract river flooding.

    """
    iso3 = country['iso3']

    models = [
        '00000NorESM1-M',
        '0000GFDL-ESM2M',
        '0000HadGEM2-ES',
        '00IPSL-CM5A-LR',
        'MIROC-ESM-CHEM',
    ]

    for model in models:

        my_files = [
            ('inunriver_rcp8p5_{}_2080_rp01000.tif'.format(model)),
            ('inunriver_rcp8p5_{}_2080_rp00100.tif'.format(model)),
            ('inunriver_rcp8p5_{}_2080_rp00050.tif'.format(model)),
            ('inunriver_rcp8p5_{}_2080_rp00025.tif'.format(model))
        ]

        for my_file in my_files:

            filename = my_file.replace('.tif','')

            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inunriver')
            if not os.path.exists(folder):
                os.mkdir(folder)
            path_out = os.path.join(folder, filename + '.shp')

            if os.path.exists(path_out):
                continue

            filename = 'national_outline.shp'
            folder = os.path.join(DATA_PROCESSED, iso3)
            path = os.path.join(folder, filename)
            national_outline = gpd.read_file(path, crs='epsg:4326')

            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inunriver')
            if not os.path.exists(folder):
                os.mkdir(folder)
            path = os.path.join(folder, my_file)

            with rasterio.open(path) as src:

                affine = src.transform
                array = src.read(1)#[:1]

                output = []

                for vec in rasterio.features.shapes(array):

                    if vec[1] > 0 and not vec[1] == 255:

                        coordinates = [i for i in vec[0]['coordinates'][0]]

                        coords = []

                        for i in coordinates:

                            x = i[0]
                            y = i[1]

                            x2, y2 = src.transform * (x, y)

                            coords.append((x2, y2))

                        output.append({
                            'type': vec[0]['type'],
                            'geometry': {
                                'type': 'Polygon',
                                'coordinates': [coords],
                            },
                            'properties': {
                                'value': vec[1],
                            }
                        })

                output = gpd.GeoDataFrame.from_features(output, crs='epsg:4326')
                output.to_file(path_out, driver='ESRI Shapefile')

    return


def process_wildfires(country):
    """
    Process wildfires.

    """
    iso3 = country['iso3']

    filename = 'hazard__csiro_wf_max_fwi_rp30.tif'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'wildfires')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path_out = os.path.join(folder, filename)

    # if os.path.exists(path_out):
    #     return

    path = os.path.join(DATA_RAW,'wildfire', filename)

    hazard = rasterio.open(path, 'r+')
    hazard.nodata = 255
    hazard.crs.from_epsg(4326)

    iso3 = country['iso3']
    path_country = os.path.join(DATA_PROCESSED, iso3,
        'national_outline.shp')

    if os.path.exists(path_country):
        country = gpd.read_file(path_country)
    else:
        print('Must generate national_outline.shp first' )

    # country['geometry'] = country['geometry'].buffer(.1)
    # bbox = country.envelope

    geo = gpd.GeoDataFrame({'geometry': country.geometry})
    coords = [json.loads(geo.to_json())['features'][0]['geometry']]

    out_img, out_transform = mask(hazard, coords, crop=True)
    out_meta = hazard.meta.copy()
    out_meta.update({"driver": "GTiff",
                    "height": out_img.shape[1],
                    "width": out_img.shape[2],
                    "transform": out_transform,
                    "crs": 'epsg:4326'})

    with rasterio.open(path_out, "w", **out_meta) as dest:
            dest.write(out_img)

    return


def extract_wildfires(country):
    """
    Extract wildfires.

    """
    iso3 = country['iso3']

    filename = 'hazard__csiro_wf_max_fwi_rp30.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'wildfires')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path_out = os.path.join(folder, filename)

    # if os.path.exists(path_out):
    #     return

    filename = 'national_outline.shp'
    folder = os.path.join(DATA_PROCESSED, iso3)
    path = os.path.join(folder, filename)
    national_outline = gpd.read_file(path, crs='epsg:4326')

    filename = 'hazard__csiro_wf_max_fwi_rp30.tif'
    folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'wildfires')
    if not os.path.exists(folder):
        os.mkdir(folder)
    path = os.path.join(folder, filename)

    with rasterio.open(path) as src:

        affine = src.transform
        array = src.read(1)#[:1]

        output = []

        for vec in rasterio.features.shapes(array):

            if vec[1] > 100 and not vec[1] == 255:

                coordinates = [i for i in vec[0]['coordinates'][0]]

                coords = []

                for i in coordinates:

                    x = i[0]
                    y = i[1]

                    x2, y2 = src.transform * (x, y)

                    coords.append((x2, y2))

                output.append({
                    'type': vec[0]['type'],
                    'geometry': {
                        'type': 'Polygon',
                        'coordinates': [coords],
                    },
                    'properties': {
                        'value': vec[1],
                    }
                })

        output = gpd.GeoDataFrame.from_features(output, crs='epsg:4326')
        output = gpd.overlay(output, national_outline, how='intersection')
        output.to_file(path_out, driver='ESRI Shapefile')

    return


if __name__ == '__main__':

    countries = get_countries()

    for idx, country in countries.iterrows():

        if not country['iso3'] in ['AZE', 'KEN']: #,'AZE']:
            continue

        # print('processing process_country_shapes')
        # process_country_shapes(country['iso3'])

        # print('processing process_regions')
        # process_regions(country['iso3'], country['gid_region'])

        # print('processing coastal')
        # process_inuncoast(country) #coastal flooding

        # print('extracting coastal')
        # extract_inuncoast(country)

        # print('processing cyclones')
        # process_cyclones(country) #cyclones

        # print('processing droughts')
        # process_droughts(country) #drought flooding

        # print('processing landslides')
        # process_landslides(country) #landslides

        # print('extracting landslides')
        # extract_landslides(country)

        print('processing rivers')
        process_inunriver(country) #river flooding

        print('extracting rivers')
        extract_inunriver(country)

        # print('processing wildfires')
        # process_wildfires(country) #wildfires

        # print('extracting wildfires')
        # extract_wildfires(country)
