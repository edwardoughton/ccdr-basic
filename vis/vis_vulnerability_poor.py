"""
Visualize unconnected population to hazards.

Written by Ed Oughton.

May 4th 2022

"""
import os
import sys
import configparser
import numpy as np
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import seaborn as sns
import contextily as cx
import geopy as gp
from math import ceil

CONFIG = configparser.ConfigParser()
CONFIG.read(os.path.join(os.path.dirname(__file__), '..', 'scripts', 'script_config.ini'))
BASE_PATH = CONFIG['file_locations']['base_path']

DATA_RAW = os.path.join(BASE_PATH, 'raw')
DATA_PROCESSED = os.path.join(BASE_PATH, 'processed')
RESULTS = os.path.join(BASE_PATH, '..', 'results')
VIS = os.path.join(BASE_PATH, '..', 'vis', 'figures')
REPORTS = os.path.join(BASE_PATH, '..', 'reports', 'images')


def plot_inuncoast(country, outline, path, background, main_title):
    """
    Plot coastal uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    # filename = "bottom_40_perc.shp"
    # folder = os.path.join(DATA_PROCESSED, country['iso3'], 'relative_wealth_index')
    # path_in = os.path.join(folder, filename)
    # vulnerable_pop = gpd.read_file(path_in, crs='epsg:4326')#[:2]

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=(12,12))
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-buffer, maxx+buffer)
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    my_files = [
        ('baseline_uncovered_poor_GSM.shp', ax1[0]),
        ('baseline_uncovered_poor_UMTS.shp', ax1[1]),
        ('baseline_uncovered_poor_LTE.shp', ax2[0]),
        ('baseline_uncovered_poor_NR.shp', ax2[1])
    ]

    if background == 1:
        for my_file in my_files:

            folder = os.path.join(DATA_PROCESSED, iso3, 'uncovered_poor')
            path1 = os.path.join(folder, my_file[0])

            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:4326')
                # layer['geometry'] = layer['geometry'].to_crs(4326)
                layer['covered'] = 'Uncovered'
                layer.plot(color='red', linewidth=0.2, alpha=1,
                    legend=True, edgecolor='grey', ax=my_file[1])
            else:
                print("Not Found: {}".format(path1))
                folder = os.path.join(DATA_PROCESSED, iso3, 'relative_wealth_index')
                path2 = os.path.join(folder, 'bottom_40_perc.shp')
                layer = gpd.read_file(path2, crs='epsg:4326')
                layer['covered'] = 'Uncovered'
                layer.plot(color='red', linewidth=0.2, alpha=1,
                    legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inuncoast')
            path1 = os.path.join(folder, 'inuncoast_rcp8p5_wtsub_2080_rp1000_0_perc_50.shp')
            if os.path.exists(path1):
                ##Not sure there actually is a shapefile for this hazard yet
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(color='black', linewidth=1.5, alpha=1,
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')
            else:
                print("Not Found: {}".format(path1))
                outline['coastal'] = ['No Risk']
                # hazard.plot(color='black', linewidth=1.5, alpha=1,
                #     legend=True, edgecolor='black', ax=ax[dim])
                outline.plot(column='coastal', cmap='Greys',
                    linewidth=0, alpha=.5, #column='ws4038tl', cmap='viridis'
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered Bottom 40 Percent')
    ax1[1].set_title('3G UMTS Uncovered Bottom 40 Percent')
    ax2[0].set_title('4G LTE Uncovered Bottom 40 Percent')
    ax2[1].set_title('5G NR Uncovered Bottom 40 Percent')

    fig.tight_layout()

    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    )
    plt.close()


def plot_cyclones(country, outline, path):
    """
    Plot cyclone uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=(12,12))
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-buffer, maxx+buffer)
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')
    # outline.plot(facecolor="none", edgecolor="grey", ax=ax1[0])
    # outline.plot(facecolor="none", edgecolor="grey", ax=ax1[1])
    # outline.plot(facecolor="none", edgecolor="grey", ax=ax2[0])
    # outline.plot(facecolor="none", edgecolor="grey", ax=ax2[1])

    my_files = [
        ('baseline_uncovered_poor_GSM.shp', ax1[0]),
        ('baseline_uncovered_poor_UMTS.shp', ax1[1]),
        ('baseline_uncovered_poor_LTE.shp', ax2[0]),
        ('baseline_uncovered_poor_NR.shp', ax2[1])
    ]

    for my_file in my_files:
        folder = os.path.join(DATA_PROCESSED, iso3, 'uncovered_poor')
        path1 = os.path.join(folder, my_file[0])

        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:4326')
            # layer['geometry'] = layer['geometry'].to_crs(4326)
            layer['covered'] = 'Uncovered'
            layer.plot(color='red', linewidth=0.2, alpha=1,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            print("Not Found: {}".format(path1))
            folder = os.path.join(DATA_PROCESSED, iso3, 'relative_wealth_index')
            path2 = os.path.join(folder, 'bottom_40_perc.shp')
            layer = gpd.read_file(path2, crs='epsg:4326')
            layer['covered'] = 'Uncovered'
            layer.plot(color='red', linewidth=0.2, alpha=1,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'cyclones')
            path1 = os.path.join(folder, 'IBTrACS.since1980.list.v04r00.lines.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(color='black', linewidth=3, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                hazard_buffer = hazard.copy()
                hazard_buffer['geometry'] = hazard_buffer['geometry'].buffer(.3)
                hazard_buffer.plot(color='grey', linewidth=0, alpha=.3,
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')
            else:
                print("Not Found: {}".format(path1))
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered Bottom 40 Percent')
    ax1[1].set_title('3G UMTS Uncovered Bottom 40 Percent')
    ax2[0].set_title('4G LTE Uncovered Bottom 40 Percent')
    ax2[1].set_title('5G NR Uncovered Bottom 40 Percent')

    fig.tight_layout()

    main_title = 'Uncovered Bottom 40 Percent and Historic Cyclone Tracks: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight'
    )
    plt.close()


def plot_droughts(country, outline, path, background, main_title):
    """
    Plot drought uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=(12,12))
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-buffer, maxx+buffer)
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    my_files = [
        ('baseline_uncovered_poor_GSM.shp', ax1[0]),
        ('baseline_uncovered_poor_UMTS.shp', ax1[1]),
        ('baseline_uncovered_poor_LTE.shp', ax2[0]),
        ('baseline_uncovered_poor_NR.shp', ax2[1])
    ]

    if background == 1:
        for my_file in my_files:
            folder = os.path.join(DATA_PROCESSED, iso3, 'uncovered_poor')
            path1 = os.path.join(folder, my_file[0])

            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:4326')
                # layer['geometry'] = layer['geometry'].to_crs(4326)
                layer['covered'] = 'Uncovered'
                layer.plot(color='red', linewidth=0.2, alpha=1,
                    legend=True, edgecolor='grey', ax=my_file[1])
            else:
                print("Not Found: {}".format(path1))
                folder = os.path.join(DATA_PROCESSED, iso3, 'relative_wealth_index')
                path2 = os.path.join(folder, 'bottom_40_perc.shp')
                layer = gpd.read_file(path2, crs='epsg:4326')
                layer['covered'] = 'Uncovered'
                layer.plot(color='red', linewidth=0.2, alpha=1,
                    legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'droughts')
            path1 = os.path.join(folder, 'aqueduct_projections_20150309.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(column='ws4038tl', cmap='Greys',
                    # color='black',
                    linewidth=0, alpha=.5, #column='ws4038tl', cmap='viridis'
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered Bottom 40 Percent')
    ax1[1].set_title('3G UMTS Uncovered Bottom 40 Percent')
    ax2[0].set_title('4G LTE Uncovered Bottom 40 Percent')
    ax2[1].set_title('5G NR Uncovered Bottom 40 Percent')

    fig.tight_layout()

    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight'
    )
    plt.close()


def plot_landslides(country, outline, path):
    """
    Plot landslide vulnerable uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=(12,12))
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-buffer, maxx+buffer)
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')
    # outline.plot(facecolor="none", edgecolor="grey", ax=ax1[0])
    # outline.plot(facecolor="none", edgecolor="grey", ax=ax1[1])
    # outline.plot(facecolor="none", edgecolor="grey", ax=ax2[0])
    # outline.plot(facecolor="none", edgecolor="grey", ax=ax2[1])

    my_files = [
        ('baseline_uncovered_poor_GSM.shp', ax1[0]),
        ('baseline_uncovered_poor_UMTS.shp', ax1[1]),
        ('baseline_uncovered_poor_LTE.shp', ax2[0]),
        ('baseline_uncovered_poor_NR.shp', ax2[1])
    ]

    for my_file in my_files:
        folder = os.path.join(DATA_PROCESSED, iso3, 'uncovered_poor')
        path1 = os.path.join(folder, my_file[0])

        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:4326')
            # layer['geometry'] = layer['geometry'].to_crs(4326)
            layer['covered'] = 'Uncovered'
            layer.plot(color='red', linewidth=0.2, alpha=1,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            print("Not Found: {}".format(path1))
            folder = os.path.join(DATA_PROCESSED, iso3, 'relative_wealth_index')
            path2 = os.path.join(folder, 'bottom_40_perc.shp')
            layer = gpd.read_file(path2, crs='epsg:4326')
            layer['covered'] = 'Uncovered'
            layer.plot(color='red', linewidth=0.2, alpha=1,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'landslide')
            path1 = os.path.join(folder, 'ls_arup.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:4326')
                hazard.plot(color='black', linewidth=2, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim]) #column='Risk', cmap='viridis'
                # hazard.plot(column='value', cmap='viridis_r', linewidth=0, alpha=.3,
                #     legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered Bottom 40 Percent')
    ax1[1].set_title('3G UMTS Uncovered Bottom 40 Percent')
    ax2[0].set_title('4G LTE Uncovered Bottom 40 Percent')
    ax2[1].set_title('5G NR Uncovered Bottom 40 Percent')

    fig.tight_layout()

    main_title = 'Uncovered Bottom 40 Percent and Landslide Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight'
    )
    plt.close()


def plot_uncovered_pop_by_region(country, outline, path):
    """
    Plot uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, axes = plt.subplots(6, 4, figsize=(16,16))
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2

    for idx, ax in enumerate(axes):

        for dim in range(0,3+1):

            if idx == 0:

                folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'cyclones')
                path1 = os.path.join(folder, 'IBTrACS.since1980.list.v04r00.lines.shp')
                if os.path.exists(path1):
                    hazard = gpd.read_file(path1, crs='epsg:3857')
                    # hazard = hazard.to_crs(4326)
                    hazard.plot(color='black', linewidth=2, alpha=1,
                        legend=True, edgecolor='black', ax=ax[dim])

            ax[dim].set_xlim(minx-buffer, maxx+buffer)
            ax[dim].set_ylim(miny-0.1, maxy+.1)
            # outline.plot(facecolor="none", edgecolor="grey", ax=ax[dim])
            cx.add_basemap(ax[dim], crs='epsg:4326')

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            if dim == 0:
                path1 = os.path.join(folder, 'baseline_uncovered_GSM.shp')
                if os.path.exists(path1):
                    gsm = gpd.read_file(path1, crs='epsg:3857')
                    gsm = gsm.to_crs(4326)
                    gsm.plot(color='red', linewidth=0, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])
            if dim == 1:
                path2 = os.path.join(folder, 'baseline_uncovered_UMTS.shp')
                if os.path.exists(path2):
                    umts = gpd.read_file(path2, crs='epsg:3857')
                    umts = umts.to_crs(4326)
                    umts.plot(color='blue', linewidth=0, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])
            if dim == 2:
                path3 = os.path.join(folder, 'baseline_uncovered_LTE.shp')
                if os.path.exists(path3):
                    lte = gpd.read_file(path3, crs='epsg:3857')
                    lte = lte.to_crs(4326)
                    lte.plot(color='yellow', linewidth=0, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])
            if dim == 3:
                path4 = os.path.join(folder, 'baseline_uncovered_NR.shp')
                if os.path.exists(path4):
                    nr = gpd.read_file(path4, crs='epsg:3857')
                    nr = nr.to_crs(4326)
                    nr.plot(color='black', linewidth=0, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])
                else:
                    print("Not Found: {}".format(path4))
                    nr = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                    nr.plot(color='black', linewidth=0, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    fig.tight_layout()

    main_title = 'Uncovered Population by Hazard: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    # pad_inches=0.4,
    bbox_inches='tight'
    )
    plt.close()


def plot_inunriver(country, outline, path):
    """
    Plot river uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=(12,12))
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-buffer, maxx+buffer)
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    my_files = [
        ('baseline_uncovered_poor_GSM.shp', ax1[0]),
        ('baseline_uncovered_poor_UMTS.shp', ax1[1]),
        ('baseline_uncovered_poor_LTE.shp', ax2[0]),
        ('baseline_uncovered_poor_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'uncovered_poor')
        path1 = os.path.join(folder, my_file[0])

        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:4326')
            # layer['geometry'] = layer['geometry'].to_crs(4326)
            layer['covered'] = 'Uncovered'
            layer.plot(color='red', linewidth=0.2, alpha=1,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            print("Not Found: {}".format(path1))
            folder = os.path.join(DATA_PROCESSED, iso3, 'relative_wealth_index')
            path2 = os.path.join(folder, 'bottom_40_perc.shp')
            layer = gpd.read_file(path2, crs='epsg:4326')
            layer['covered'] = 'Uncovered'
            layer.plot(color='red', linewidth=0.2, alpha=1,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inunriver')
            path1 = os.path.join(folder, 'inunriver_rcp8p5_MIROC-ESM-CHEM_2080_rp01000.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(color='black', linewidth=1.5, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered Bottom 40 Percent')
    ax1[1].set_title('3G UMTS Uncovered Bottom 40 Percent')
    ax2[0].set_title('4G LTE Uncovered Bottom 40 Percent')
    ax2[1].set_title('5G NR Uncovered Bottom 40 Percent')

    fig.tight_layout()

    main_title = 'Uncovered Bottom 40 Percent and River Flooding Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight'
    )
    plt.close()


def plot_wildfires(country, outline, path):
    """
    Plot wildfire vulnerable uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=(12,12))
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-buffer, maxx+buffer)
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    my_files = [
        ('baseline_uncovered_poor_GSM.shp', ax1[0]),
        ('baseline_uncovered_poor_UMTS.shp', ax1[1]),
        ('baseline_uncovered_poor_LTE.shp', ax2[0]),
        ('baseline_uncovered_poor_NR.shp', ax2[1])
    ]

    for my_file in my_files:
        folder = os.path.join(DATA_PROCESSED, iso3, 'uncovered_poor')
        path1 = os.path.join(folder, my_file[0])

        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:4326')
            # layer['geometry'] = layer['geometry'].to_crs(4326)
            layer['covered'] = 'Uncovered'
            layer.plot(color='red', linewidth=0.2, alpha=1,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            print("Not Found: {}".format(path1))
            folder = os.path.join(DATA_PROCESSED, iso3, 'relative_wealth_index')
            path2 = os.path.join(folder, 'bottom_40_perc.shp')
            layer = gpd.read_file(path2, crs='epsg:4326')
            layer['covered'] = 'Uncovered'
            layer.plot(color='red', linewidth=0.2, alpha=1,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'wildfires')
            path1 = os.path.join(folder, 'hazard__csiro_wf_max_fwi_rp30.shp')

            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:4326')
                hazard.plot(color='black', linewidth=.1, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                # hazard.plot(column='value', cmap='viridis_r', linewidth=0, alpha=.3,
                #     legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered Bottom 40 Percent')
    ax1[1].set_title('3G UMTS Uncovered Bottom 40 Percent')
    ax2[0].set_title('4G LTE Uncovered Bottom 40 Percent')
    ax2[1].set_title('5G NR Uncovered Bottom 40 Percent')

    fig.tight_layout()

    main_title = 'Uncovered Bottom 40 Percent and Wildfire Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight'
    )
    plt.close()


if __name__ == '__main__':

    filename = 'countries.csv'
    path = os.path.join(DATA_RAW, filename)
    countries = pd.read_csv(path, encoding='latin-1')

    for idx, country in countries.iterrows():

        if not country['iso3'] in ['GHA']: #['MWI','GHA']
            continue

        iso3 = country['iso3']
        country['figsize'] = (8,10)

        print('-- {} --'.format(iso3))

        folder_reports = os.path.join(REPORTS, iso3)
        if not os.path.exists(folder_reports):
            os.makedirs(folder_reports)

        folder_vis = os.path.join(VIS, iso3)
        if not os.path.exists(folder_vis):
            os.makedirs(folder_vis)

        filename = 'regions_{}_{}.shp'.format(country['lowest'], iso3)
        path = os.path.join(DATA_PROCESSED, iso3, 'regions', filename)
        shapes = gpd.read_file(path, crs='epsg:4326')

        filename = 'national_outline.shp'
        path = os.path.join(DATA_PROCESSED, iso3, filename)
        outline = gpd.read_file(path, crs='epsg:4326')

        path = os.path.join(folder_vis, '{}_inuncoast_poor_w_background.png'.format(iso3))
        # # if not os.path.exists(path):
        main_title = 'Uncovered Bottom 40 Percent and Coastal Flooding Areas: {}'.format(country['country'])
        plot_inuncoast(country, outline, path, 1, main_title)

        # path = os.path.join(folder_vis, '{}_inuncoast_poor_no_background.png'.format(iso3))
        # # # if not os.path.exists(path):
        # main_title = 'Coastal Flooding Areas: {}'.format(country['country'])
        # plot_inuncoast(country, outline, path, 0, main_title)

        path = os.path.join(folder_vis, '{}_poor_cyclones.png'.format(iso3))
        # if not os.path.exists(path):
        plot_cyclones(country, outline, path)

        path = os.path.join(folder_vis, '{}_droughts_poor_w_background.png'.format(iso3))
        # if not os.path.exists(path):
        main_title = 'Uncovered Bottom 40 Percent and High Water Stress Areas: {}'.format(country['country'])
        plot_droughts(country, outline, path, 1, main_title)

        # path = os.path.join(folder_vis, '{}_droughts_poor_no_background.png'.format(iso3))
        # # if not os.path.exists(path):
        # main_title = 'High Water Stress Areas: {}'.format(country['country'])
        # plot_droughts(country, outline, path, 0, main_title)

        path = os.path.join(folder_vis, '{}_poor_landslides.png'.format(iso3))
        # if not os.path.exists(path):
        plot_landslides(country, outline, path)

        path = os.path.join(folder_vis, '{}_poor_inunriver.png'.format(iso3))
        # if not os.path.exists(path):
        plot_inunriver(country, outline, path)

        path = os.path.join(folder_vis, '{}_poor_wildfires.png'.format(iso3))
        # if not os.path.exists(path):
        plot_wildfires(country, outline, path)

        # print('Complete')
