"""
Visualize unconnected population to hazards.

Written by Ed Oughton.

May 4th 2022

"""
import os
import sys
import configparser
import numpy as np
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import seaborn as sns
import contextily as cx
import geopy as gp
from math import ceil

CONFIG = configparser.ConfigParser()
CONFIG.read(os.path.join(os.path.dirname(__file__), '..', 'scripts', 'script_config.ini'))
BASE_PATH = CONFIG['file_locations']['base_path']

DATA_RAW = os.path.join(BASE_PATH, 'raw')
DATA_PROCESSED = os.path.join(BASE_PATH, 'processed')
RESULTS = os.path.join(BASE_PATH, '..', 'results')
VIS = os.path.join(BASE_PATH, '..', 'vis', 'figures')
REPORTS = os.path.join(BASE_PATH, '..', 'reports', 'images')


def plot_inuncoast_uncovered(country, outline, path, background, main_title, dimensions):
    """
    Plot coastal uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']
    buffer = country['buffer']

    if iso3 in ['KEN']:
        dimensions = (12,8)#dimensions
    else:
        dimensions(12,12)

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inuncoast')
            path1 = os.path.join(folder, 'inuncoast_rcp8p5_wtsub_2080_rp1000_0.shp')
            if os.path.exists(path1):
                ##Not sure there actually is a shapefile for this hazard yet
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(color='black', linewidth=1.5, alpha=1,
                    legend=True, edgecolor='black', ax=ax[dim])
                # cx.add_basemap(ax[dim], crs='epsg:4326')
            else:
                outline['coastal'] = ['No Risk']
                # hazard.plot(color='black', linewidth=1.5, alpha=1,
                #     legend=True, edgecolor='black', ax=ax[dim])
                outline = outline.to_crs(4326)
                outline.plot(column='coastal', cmap='Greys',
                    linewidth=0, alpha=.5, #column='ws4038tl', cmap='viridis'
                    legend=True, edgecolor='black', ax=ax[dim])
                # cx.add_basemap(ax[dim], crs='epsg:4326')

    my_files = [
        ('baseline_uncovered_GSM.shp', ax1[0]),
        ('baseline_uncovered_UMTS.shp', ax1[1]),
        ('baseline_uncovered_LTE.shp', ax2[0]),
        ('baseline_uncovered_NR.shp', ax2[1])
    ]

    if background == 1:
        for my_file in my_files:

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            path1 = os.path.join(folder, my_file[0])
            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:3857')
                layer = layer.to_crs(4326)
                layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])
            else:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Uncovered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_inuncoast_covered(country, outline, path, background, main_title, dimensions):
    """
    Plot coastal uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inuncoast')
            path1 = os.path.join(folder, 'inuncoast_rcp8p5_wtsub_2080_rp1000_0_perc_50.shp')
            if os.path.exists(path1):
                ##Not sure there actually is a shapefile for this hazard yet
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                haz1 = hazard.plot(color='black', linewidth=1.5, alpha=1,
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')
            else:
                outline['coastal'] = ['No Risk']
                # hazard.plot(color='black', linewidth=1.5, alpha=1,
                #     legend=True, edgecolor='black', ax=ax[dim])
                outline1 = outline.plot(column='coastal', cmap='Greys',
                    linewidth=0, alpha=.5, #column='ws4038tl', cmap='viridis'
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    my_files = [
        ('baseline_tile_coverage_GSM.shp', ax1[0]),
        ('baseline_tile_coverage_UMTS.shp', ax1[1]),
        ('baseline_tile_coverage_LTE.shp', ax2[0]),
        ('baseline_tile_coverage_NR.shp', ax2[1])
    ]

    if background == 1:
        for my_file in my_files:

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            path1 = os.path.join(folder, my_file[0])
            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:3857')
                layer = layer[layer['coverage'] == 1]
                if len(layer) == 0:
                    layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                    layer['coverage'] = 'Covered'
                    layer.plot(column='coverage', cmap='viridis', linewidth=0.01, alpha=.0, #facecolor="none",
                        legend=True, edgecolor='grey', ax=my_file[1])
                    continue
                layer['coverage'] = 'Covered'
                layer = layer.to_crs(4326)
                layer.plot(column='coverage', categorical=True, cmap='viridis_r', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])
            else:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['coverage'] = 'Covered'
                layer.plot(column='coverage', cmap='viridis', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])

    ax1[0].set_title('2G GSM Covered')
    ax1[1].set_title('3G UMTS Covered')
    ax2[0].set_title('4G LTE Covered')
    ax2[1].set_title('5G NR Covered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_cyclones_uncovered(country, outline, path, dimensions):
    """
    Plot cyclone uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')
    outline.plot(facecolor="none", edgecolor="grey", ax=ax1[0])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax1[1])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax2[0])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax2[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'cyclones')
            path1 = os.path.join(folder, 'IBTrACS.since1980.list.v04r00.lines.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(color='black', linewidth=3, alpha=1,
                    legend=True, edgecolor='black', ax=ax[dim])
                hazard_buffer = hazard.copy()
                hazard_buffer['geometry'] = hazard_buffer['geometry'].buffer(.3)
                hazard_buffer.plot(color='grey', linewidth=0, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')
            else:
                cx.add_basemap(ax[dim], crs='epsg:4326')

    my_files = [
        ('baseline_uncovered_GSM.shp', ax1[0]),
        ('baseline_uncovered_UMTS.shp', ax1[1]),
        ('baseline_uncovered_LTE.shp', ax2[0]),
        ('baseline_uncovered_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
        path1 = os.path.join(folder, my_file[0])
        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:3857')
            layer = layer.to_crs(4326)
            layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
            layer['covered'] = 'Uncovered'
            layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    main_title = 'Uncovered Population and Historic Cyclone Tracks: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()



def plot_cyclones_covered(country, outline, path, dimensions):
    """
    Plot cyclone covered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')
    outline.plot(facecolor="none", edgecolor="grey", ax=ax1[0])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax1[1])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax2[0])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax2[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'cyclones')
            path1 = os.path.join(folder, 'IBTrACS.since1980.list.v04r00.lines.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(color='black', linewidth=3, alpha=1,
                    legend=True, edgecolor='black', ax=ax[dim])
                hazard_buffer = hazard.copy()
                hazard_buffer['geometry'] = hazard_buffer['geometry'].buffer(.3)
                hazard_buffer.plot(color='grey', linewidth=0, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')
            else:
                cx.add_basemap(ax[dim], crs='epsg:4326')

    my_files = [
        ('baseline_tile_coverage_GSM.shp', ax1[0]),
        ('baseline_tile_coverage_UMTS.shp', ax1[1]),
        ('baseline_tile_coverage_LTE.shp', ax2[0]),
        ('baseline_tile_coverage_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
        path1 = os.path.join(folder, my_file[0])
        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:3857')
            layer = layer[layer['coverage'] == 1]
            if len(layer) == 0:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Covered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=0,
                    legend=True, edgecolor='grey', ax=my_file[1])
                continue
            layer['covered'] = 'Covered'
            layer = layer.to_crs(4326)
            layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
            layer['covered'] = 'Covered'
            layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])

    ax1[0].set_title('2G GSM Covered')
    ax1[1].set_title('3G UMTS Covered')
    ax2[0].set_title('4G LTE Covered')
    ax2[1].set_title('5G NR Covered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    main_title = 'Covered Population and Historic Cyclone Tracks: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_water_stress_uncovered(country, outline, path,
    background, main_title, dimensions, column):
    """
    Plot drought uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'droughts')
            path1 = os.path.join(folder, 'aqueduct_projections_20150309.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(column=column, cmap='Greys_r',
                    # color='black',
                    linewidth=0, alpha=.5, #column='ws4038tl', cmap='viridis'
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    my_files = [
        ('baseline_uncovered_GSM.shp', ax1[0]),
        ('baseline_uncovered_UMTS.shp', ax1[1]),
        ('baseline_uncovered_LTE.shp', ax2[0]),
        ('baseline_uncovered_NR.shp', ax2[1])
    ]

    if background == 1:
        for my_file in my_files:

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            path1 = os.path.join(folder, my_file[0])
            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:3857')
                layer = layer.to_crs(4326)
                layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])
            else:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Uncovered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_drought_supply_demand_uncovered(country, outline, path,
    background, main_title, dimensions, column):
    """
    Plot drought uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'droughts')
            path1 = os.path.join(folder, 'aqueduct_projections_20150309.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(column=column, cmap='Greys_r',
                    # color='black',
                    linewidth=0, alpha=.5, #column='ws4038tl', cmap='viridis'
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')


    my_files = [
        ('baseline_uncovered_GSM.shp', ax1[0]),
        ('baseline_uncovered_UMTS.shp', ax1[1]),
        ('baseline_uncovered_LTE.shp', ax2[0]),
        ('baseline_uncovered_NR.shp', ax2[1])
    ]

    if background == 1:
        for my_file in my_files:

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            path1 = os.path.join(folder, my_file[0])
            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:3857')
                layer = layer.to_crs(4326)
                layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])
            else:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Uncovered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_droughts_covered(country, outline, path, background, main_title, dimensions):
    """
    Plot drought covered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'droughts')
            path1 = os.path.join(folder, 'aqueduct_projections_20150309.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(column='ws4038tl', cmap='Greys',
                    # color='black',
                    linewidth=0, alpha=.5, #column='ws4038tl', cmap='viridis'
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')


    my_files = [
        ('baseline_tile_coverage_GSM.shp', ax1[0]),
        ('baseline_tile_coverage_UMTS.shp', ax1[1]),
        ('baseline_tile_coverage_LTE.shp', ax2[0]),
        ('baseline_tile_coverage_NR.shp', ax2[1])
    ]

    if background == 1:
        for my_file in my_files:

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            path1 = os.path.join(folder, my_file[0])

            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:3857')
                layer = layer[layer['coverage'] == 1]
                if len(layer) == 0:
                    layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                    layer['covered'] = 'Covered'
                    layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=0,
                        legend=True, edgecolor='grey', ax=my_file[1])
                    continue
                layer['covered'] = 'Covered'
                layer = layer.to_crs(4326)
                layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])
            else:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Covered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                    legend=True, edgecolor='grey', ax=my_file[1])


    ax1[0].set_title('2G GSM Covered')
    ax1[1].set_title('3G UMTS Covered')
    ax2[0].set_title('4G LTE Covered')
    ax2[1].set_title('5G NR Covered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_landslides_uncovered(country, outline, path, dimensions):
    """
    Plot landslide vulnerable uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')
    outline.plot(facecolor="none", edgecolor="grey", ax=ax1[0])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax1[1])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax2[0])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax2[1])

    my_files = [
        ('baseline_uncovered_GSM.shp', ax1[0]),
        ('baseline_uncovered_UMTS.shp', ax1[1]),
        ('baseline_uncovered_LTE.shp', ax2[0]),
        ('baseline_uncovered_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
        path1 = os.path.join(folder, my_file[0])
        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:3857')
            layer = layer.to_crs(4326)
            layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
            layer['covered'] = 'Uncovered'
            layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'landslide')
            path1 = os.path.join(folder, 'ls_arup.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:4326')
                hazard.plot(color='black', linewidth=2, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim]) #column='Risk', cmap='viridis'
                # hazard.plot(column='value', cmap='viridis_r', linewidth=0, alpha=.3,
                #     legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    main_title = 'Uncovered Population and Landslide Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()



def plot_landslides_covered(country, outline, path, dimensions):
    """
    Plot landslide vulnerable covered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')
    outline.plot(facecolor="none", edgecolor="grey", ax=ax1[0])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax1[1])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax2[0])
    outline.plot(facecolor="none", edgecolor="grey", ax=ax2[1])

    my_files = [
        ('baseline_tile_coverage_GSM.shp', ax1[0]),
        ('baseline_tile_coverage_UMTS.shp', ax1[1]),
        ('baseline_tile_coverage_LTE.shp', ax2[0]),
        ('baseline_tile_coverage_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
        path1 = os.path.join(folder, my_file[0])
        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:3857')
            layer = layer[layer['coverage'] == 1]
            if len(layer) == 0:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Covered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=0,
                    legend=True, edgecolor='grey', ax=my_file[1])
                continue
            layer['covered'] = 'Covered'
            layer = layer.to_crs(4326)
            layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
            layer['covered'] = 'Covered'
            layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'landslide')
            path1 = os.path.join(folder, 'ls_arup.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:4326')
                hazard.plot(color='black', linewidth=2, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim]) #column='Risk', cmap='viridis'
                # hazard.plot(column='value', cmap='viridis_r', linewidth=0, alpha=.3,
                #     legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Covered')
    ax1[1].set_title('3G UMTS Covered')
    ax2[0].set_title('4G LTE Covered')
    ax2[1].set_title('5G NR Covered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    main_title = 'Covered Population and Landslide Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_uncovered_pop_by_region(country, outline, path):
    """
    Plot uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, axes = plt.subplots(6, 4, figsize=(16,16))
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2

    for idx, ax in enumerate(axes):

        for dim in range(0,3+1):

            if idx == 0:

                folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'cyclones')
                path1 = os.path.join(folder, 'IBTrACS.since1980.list.v04r00.lines.shp')
                if os.path.exists(path1):
                    hazard = gpd.read_file(path1, crs='epsg:3857')
                    # hazard = hazard.to_crs(4326)
                    hazard.plot(color='black', linewidth=2, alpha=1,
                        legend=True, edgecolor='black', ax=ax[dim])

            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)
            outline.plot(facecolor="none", edgecolor="grey", ax=ax[dim])
            cx.add_basemap(ax[dim], crs='epsg:4326')

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            if dim == 0:
                path1 = os.path.join(folder, 'baseline_uncovered_GSM.shp')
                if os.path.exists(path1):
                    gsm = gpd.read_file(path1, crs='epsg:3857')
                    gsm = gsm.to_crs(4326)
                    gsm.plot(color='red', linewidth=0.01, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])
            if dim == 1:
                path2 = os.path.join(folder, 'baseline_uncovered_UMTS.shp')
                if os.path.exists(path2):
                    umts = gpd.read_file(path2, crs='epsg:3857')
                    umts = umts.to_crs(4326)
                    umts.plot(color='blue', linewidth=0.01, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])
            if dim == 2:
                path3 = os.path.join(folder, 'baseline_uncovered_LTE.shp')
                if os.path.exists(path3):
                    lte = gpd.read_file(path3, crs='epsg:3857')
                    lte = lte.to_crs(4326)
                    lte.plot(color='yellow', linewidth=0.01, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])
            if dim == 3:
                path4 = os.path.join(folder, 'baseline_uncovered_NR.shp')
                if os.path.exists(path4):
                    nr = gpd.read_file(path4, crs='epsg:3857')
                    nr = nr.to_crs(4326)
                    nr.plot(color='black', linewidth=0.01, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])
                else:
                    nr = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                    nr.plot(color='black', linewidth=0.01, alpha=0.4,
                        legend=True, edgecolor='grey', ax=ax[dim])

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    fig.tight_layout()

    main_title = 'Uncovered Population by Hazard: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    # pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_inunriver_uncovered(country, outline, path, dimensions):
    """
    Plot river uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    my_files = [
        ('baseline_uncovered_GSM.shp', ax1[0]),
        ('baseline_uncovered_UMTS.shp', ax1[1]),
        ('baseline_uncovered_LTE.shp', ax2[0]),
        ('baseline_uncovered_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
        path1 = os.path.join(folder, my_file[0])
        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:3857')
            layer = layer.to_crs(4326)
            layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
            layer['covered'] = 'Uncovered'
            layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inunriver')
            path1 = os.path.join(folder, 'inunriver_rcp8p5_MIROC-ESM-CHEM_2080_rp01000.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(color='black', linewidth=1.5, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    main_title = 'Uncovered Population and River Flooding Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_inunriver_covered(country, outline, path, dimensions):
    """
    Plot river covered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    my_files = [
        ('baseline_tile_coverage_GSM.shp', ax1[0]),
        ('baseline_tile_coverage_UMTS.shp', ax1[1]),
        ('baseline_tile_coverage_LTE.shp', ax2[0]),
        ('baseline_tile_coverage_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
        path1 = os.path.join(folder, my_file[0])
        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:3857')
            layer = layer[layer['coverage'] == 1]
            if len(layer) == 0:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Covered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=0,
                    legend=True, edgecolor='grey', ax=my_file[1])
                continue
            layer['covered'] = 'Covered'
            layer = layer.to_crs(4326)
            layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
            layer['covered'] = 'Covered'
            layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'inunriver')
            path1 = os.path.join(folder, 'inunriver_rcp8p5_MIROC-ESM-CHEM_2080_rp01000.shp')
            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:3857')
                hazard = hazard.to_crs(4326)
                hazard.plot(color='black', linewidth=1.5, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    ax1[0].set_title('2G GSM Covered')
    ax1[1].set_title('3G UMTS Covered')
    ax2[0].set_title('4G LTE Covered')
    ax2[1].set_title('5G NR Covered')

    fig.tight_layout()

    main_title = 'Covered Population and River Flooding Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_wildfires_uncovered(country, outline, path, dimensions):
    """
    Plot wildfire vulnerable uncovered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    my_files = [
        ('baseline_uncovered_GSM.shp', ax1[0]),
        ('baseline_uncovered_UMTS.shp', ax1[1]),
        ('baseline_uncovered_LTE.shp', ax2[0]),
        ('baseline_uncovered_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
        path1 = os.path.join(folder, my_file[0])
        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:3857')
            layer = layer.to_crs(4326)
            layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
            layer['covered'] = 'Uncovered'
            layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'wildfires')
            path1 = os.path.join(folder, 'hazard__csiro_wf_max_fwi_rp30.shp')

            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:4326')
                hazard.plot(color='black', linewidth=.1, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                # hazard.plot(column='value', cmap='viridis_r', linewidth=0, alpha=.3,
                #     legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    main_title = 'Uncovered Population and Wildfire Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_wildfires_covered(country, outline, path, dimensions):
    """
    Plot wildfire vulnerable covered population by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    my_files = [
        ('baseline_tile_coverage_GSM.shp', ax1[0]),
        ('baseline_tile_coverage_UMTS.shp', ax1[1]),
        ('baseline_tile_coverage_LTE.shp', ax2[0]),
        ('baseline_tile_coverage_NR.shp', ax2[1])
    ]

    for my_file in my_files:

        folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
        path1 = os.path.join(folder, my_file[0])
        if os.path.exists(path1):
            layer = gpd.read_file(path1, crs='epsg:3857')
            layer = layer[layer['coverage'] == 1]
            if len(layer) == 0:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Covered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=0,
                    legend=True, edgecolor='grey', ax=my_file[1])
                continue
            layer['covered'] = 'Covered'
            layer = layer.to_crs(4326)
            layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])
        else:
            layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
            layer['covered'] = 'Covered'
            layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                legend=True, edgecolor='grey', ax=my_file[1])

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'hazards', 'wildfires')
            path1 = os.path.join(folder, 'hazard__csiro_wf_max_fwi_rp30.shp')

            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:4326')
                hazard.plot(color='black', linewidth=.1, alpha=.5,
                    legend=True, edgecolor='black', ax=ax[dim])
                # hazard.plot(column='value', cmap='viridis_r', linewidth=0, alpha=.3,
                #     legend=True, edgecolor='black', ax=ax[dim])
                cx.add_basemap(ax[dim], crs='epsg:4326')

    ax1[0].set_title('2G GSM Covered')
    ax1[1].set_title('3G UMTS Covered')
    ax2[0].set_title('4G LTE Covered')
    ax2[1].set_title('5G NR Covered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    main_title = 'Covered Population and Wildfire Areas: {}'.format(name)
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_gdp_uncovered(country, outline, path, background, main_title, dimensions):
    """
    Plot gdp by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    for ax in [ax1, ax2]:
        for dim in [0,1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'gridded_gdp')
            path1 = os.path.join(folder, 'gdp_grid.shp')

            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:4326')
                values = hazard['g1_2020']
                values = np.asarray(values)
                deciles = np.percentile(values, np.arange(0, 100, 10))
                q1 = '<${}m'.format(int(ceil(deciles[0])))
                q2 = '<${}m'.format(int(ceil(deciles[1])))
                q3 = '<${}m'.format(int(ceil(deciles[2])))
                q4 = '<${}m'.format(int(ceil(deciles[3])))
                q5 = '<${}m'.format(int(ceil(deciles[4])))
                q6 = '<${}m'.format(int(ceil(deciles[5])))
                q7 = '<${}m'.format(int(ceil(deciles[6])))
                q8 = '<${}m'.format(int(ceil(deciles[7])))
                q9 = '<${}m'.format(int(ceil(deciles[8])))
                q10 = '>${}m'.format(int(ceil(deciles[9])))
                bin_labels = [q1, q2, q3, q4, q5, q6, q7, q8, q9, q10]
                hazard['bin'] = pd.qcut(hazard['g1_2020'],
                              10,
                              labels=bin_labels)
                hazard.plot(column='bin', cmap='Greys', linewidth=.1, alpha=.5,
                    legend=True, edgecolor='black',  ax=ax[dim],
                    legend_kwds={'bbox_to_anchor': (1, 1)}
                    )
                cx.add_basemap(ax[dim], crs='epsg:4326')
                # leg1 = ax[dim].legend(loc='lower right')

            if background == 0:
                continue

            if ax[dim] == ax1[0]:
                filename = 'baseline_uncovered_GSM.shp'
            if ax[dim] == ax1[1]:
                filename = 'baseline_uncovered_UMTS.shp'
            if ax[dim] == ax2[0]:
                filename = 'baseline_uncovered_LTE.shp'
            if ax[dim] == ax2[1]:
                filename = 'baseline_uncovered_NR.shp'

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            path1 = os.path.join(folder, filename)
            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:3857')
                layer = layer.to_crs(4326)
                layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                    edgecolor='grey', ax=ax[dim], #legend=True, legend_kwds={'bbox_to_anchor': (1, 1)}
                    )
            else:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Uncovered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                    edgecolor='grey', ax=ax[dim], #legend=True, legend_kwds={'bbox_to_anchor': (1, 1)}
                    )
            # ax[dim].add_artist(leg1)

    ax1[0].set_title('2G GSM Uncovered')
    ax1[1].set_title('3G UMTS Uncovered')
    ax2[0].set_title('4G LTE Uncovered')
    ax2[1].set_title('5G NR Uncovered')

    filename = 'core_edges_existing.shp'
    folder = os.path.join(DATA_PROCESSED, iso3, 'network_existing')
    path_fiber = os.path.join(folder, filename)
    if os.path.exists(path_fiber):
        fiber = gpd.read_file(path_fiber, crs='epsg:4326')
        fiber.plot(color='orange', lw=2, ax=ax1[0])
        fiber.plot(color='orange', lw=2, ax=ax1[1])
        fiber.plot(color='orange', lw=2, ax=ax2[0])
        fiber.plot(color='orange', lw=2, ax=ax2[1])

    plt.legend(['Fiber', '2G GSM', '3G UMTS', '4G LTE', '5G NR' ], loc='lower right', title='Assets')

    fig.tight_layout()

    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


def plot_gdp_covered(country, outline, path, background, main_title, dimensions):
    """
    Plot gdp by region.

    """
    iso3 = country['iso3']
    name = country['country']

    fig, (ax1, ax2) = plt.subplots(2, 2, figsize=dimensions)
    fig.subplots_adjust(hspace=.3, wspace=.1)
    fig.set_facecolor('gainsboro')

    minx, miny, maxx, maxy = outline.total_bounds
    buffer = 2
    for ax in [ax1, ax2]:
        for dim in [0,1]:
            ax[dim].set_xlim(minx-(buffer-1), maxx+(buffer+1))
            ax[dim].set_ylim(miny-0.1, maxy+.1)

    fig.set_facecolor('gainsboro')

    for ax in [ax1, ax2]:
        for dim in [0, 1]:
            folder = os.path.join(DATA_PROCESSED, iso3, 'gridded_gdp')
            path1 = os.path.join(folder, 'gdp_grid.shp')

            if os.path.exists(path1):
                hazard = gpd.read_file(path1, crs='epsg:4326')
                values = hazard['g1_2020']
                values = np.asarray(values)
                deciles = np.percentile(values, np.arange(0, 100, 10))
                q1 = '<${}m'.format(int(ceil(deciles[0])))
                q2 = '<${}m'.format(int(ceil(deciles[1])))
                q3 = '<${}m'.format(int(ceil(deciles[2])))
                q4 = '<${}m'.format(int(ceil(deciles[3])))
                q5 = '<${}m'.format(int(ceil(deciles[4])))
                q6 = '<${}m'.format(int(ceil(deciles[5])))
                q7 = '<${}m'.format(int(ceil(deciles[6])))
                q8 = '<${}m'.format(int(ceil(deciles[7])))
                q9 = '<${}m'.format(int(ceil(deciles[8])))
                q10 = '>${}m'.format(int(ceil(deciles[9])))
                bin_labels = [q1, q2, q3, q4, q5, q6, q7, q8, q9, q10]
                hazard['bin'] = pd.qcut(hazard['g1_2020'],
                              10,
                              labels=bin_labels)
                hazard.plot(column='bin', cmap='Greys', linewidth=.1, alpha=.5,
                    legend=True, edgecolor='black',  ax=ax[dim],
                    legend_kwds={'bbox_to_anchor': (1, 1)}
                    )
                cx.add_basemap(ax[dim], crs='epsg:4326')
                # leg1 = ax[dim].legend(loc='lower right')

            if background == 0:
                continue

            if ax[dim] == ax1[0]:
                filename = 'baseline_tile_coverage_GSM.shp'
            if ax[dim] == ax1[1]:
                filename = 'baseline_tile_coverage_UMTS.shp'
            if ax[dim] == ax2[0]:
                filename = 'baseline_tile_coverage_LTE.shp'
            if ax[dim] == ax2[1]:
                filename = 'baseline_tile_coverage_NR.shp'

            folder = os.path.join(DATA_PROCESSED, iso3, 'coverage')
            path1 = os.path.join(folder, filename)
            if os.path.exists(path1):
                layer = gpd.read_file(path1, crs='epsg:3857')
                layer = layer[layer['coverage'] == 1]
                if len(layer) == 0:
                    layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                    layer['covered'] = 'Covered'
                    layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=0,
                        legend=True, edgecolor='grey', ax=ax[dim])
                    continue
                layer['covered'] = 'Covered'
                layer = layer.to_crs(4326)
                layer.plot(column='covered', cmap='viridis_r', linewidth=0.01, alpha=.5,
                    edgecolor='grey', ax=ax[dim], #legend=True, legend_kwds={'bbox_to_anchor': (1, 1)}
                    )
            else:
                layer = gpd.read_file(os.path.join(folder, '..', 'national_outline.shp'), crs='epsg:4326')
                layer['covered'] = 'Covered'
                layer.plot(column='covered', cmap='viridis', linewidth=0.01, alpha=.5,
                    edgecolor='grey', ax=ax[dim], #legend=True, legend_kwds={'bbox_to_anchor': (1, 1)}
                    )

    ax1[0].set_title('2G GSM Covered')
    ax1[1].set_title('3G UMTS Covered')
    ax2[0].set_title('4G LTE Covered')
    ax2[1].set_title('5G NR Covered')

    fig.tight_layout()
    plt.suptitle(main_title, fontsize=20, y=1.03)

    plt.savefig(path,
    pad_inches=0.4,
    bbox_inches='tight',
    dpi=600,
    )
    plt.close()


if __name__ == '__main__':

    filename = 'countries.csv'
    path = os.path.join(DATA_RAW, filename)
    countries = pd.read_csv(path, encoding='latin-1')

    for idx, country in countries.iterrows():

        if not country['iso3'] in [
            'KEN', 
            # 'ETH', 
            # 'DJI', 
            # 'SOM', 
            # 'SSD', 
            # 'MDG' 
            ]:
            continue

        dimensions = (int(country['dimensions_y']), int(country['dimensions_x']))
        iso3 = country['iso3']
        country['figsize'] = (8,8)

        print('-- {} --'.format(iso3))

        folder_reports = os.path.join(REPORTS, iso3)
        if not os.path.exists(folder_reports):
            os.makedirs(folder_reports)

        folder_vis = os.path.join(VIS, iso3)
        if not os.path.exists(folder_vis):
            os.makedirs(folder_vis)

        filename = 'regions_{}_{}.shp'.format(country['gid_region'], iso3)
        path = os.path.join(DATA_PROCESSED, iso3, 'regions', filename)
        shapes = gpd.read_file(path, crs='epsg:4326')

        filename = 'national_outline.shp'
        path = os.path.join(DATA_PROCESSED, iso3, filename)
        outline = gpd.read_file(path, crs='epsg:4326')

        path = os.path.join(folder_vis, '{}_inuncoast_uncovered_w-background.png'.format(iso3))
        # # if not os.path.exists(path):
        main_title = 'Uncovered Population and Coastal Flooding Areas: {}'.format(country['country'])
        plot_inuncoast_uncovered(country, outline, path, 1, main_title, dimensions)

        # path = os.path.join(folder_vis, '{}_inuncoast_uncovered_no-background.png'.format(iso3))
        # # # if not os.path.exists(path):
        # main_title = 'Coastal Flooding Areas: {}'.format(country['country'])
        # plot_inuncoast_uncovered(country, outline, path, 0, main_title, dimensions)

        # path = os.path.join(folder_vis, '{}_inuncoast_covered_w-background.png'.format(iso3))
        # # # if not os.path.exists(path):
        # main_title = 'Covered Population and Coastal Flooding Areas: {}'.format(country['country'])
        # plot_inuncoast_covered(country, outline, path, 1, main_title, dimensions)

        # path = os.path.join(folder_vis, '{}_cyclones_uncovered.png'.format(iso3))
        # # if not os.path.exists(path):
        # plot_cyclones_uncovered(country, outline, path, dimensions)

        # path = os.path.join(folder_vis, '{}_cyclones_covered.png'.format(iso3))
        # # if not os.path.exists(path):
        # plot_cyclones_covered(country, outline, path, dimensions)

        # path = os.path.join(folder_vis, '{}_droughts_uncovered_w-background.png'.format(iso3))
        # # if not os.path.exists(path):
        # main_title = 'Uncovered Population and Projected Water Stress Change From Baseline 2040 (RCP8.5): {}'.format(country['country'])
        # column = 'ws4038cl' #water stress, 2040, rcp8.5, future value, label string
        # plot_water_stress_uncovered(country, outline, path, 1, main_title, dimensions, column)

        # path = os.path.join(folder_vis, '{}_water-stress_uncovered_no-background.png'.format(iso3))
        # # if not os.path.exists(path):
        # main_title = 'Projected Water Stress Change From Baseline by 2040 (RCP8.5): {}'.format(country['country'])
        # column = 'ws4038cl' #water stress, 2040, rcp8.5, future value, label string
        # plot_water_stress_uncovered(country, outline, path, 0, main_title, dimensions, column)

        # path = os.path.join(folder_vis, '{}_water-supply_uncovered_no-background.png'.format(iso3))
        # # if not os.path.exists(path):
        # main_title = 'Projected Water Supply Change From Baseline by 2040 (RCP8.5): {}'.format(country['country'])
        # column = 'bt4038cl' #water stress, 2040, rcp8.5, future value, label string
        # plot_water_stress_uncovered(country, outline, path, 0, main_title, dimensions, column)

        # path = os.path.join(folder_vis, '{}_water-demand_uncovered_no-background.png'.format(iso3))
        # # if not os.path.exists(path):
        # main_title = 'Projected Water Demand Change From Baseline by 2040 (RCP8.5): {}'.format(country['country'])
        # column = 'ut4038cl' #water stress, 2040, rcp8.5, future value, label string
        # plot_water_stress_uncovered(country, outline, path, 0, main_title, dimensions, column)

        # # path = os.path.join(folder_vis, '{}_droughts_covered_no-background.png'.format(iso3))
        # # # if not os.path.exists(path):
        # # main_title = 'High Water Stress Areas 2040 (RCP8.5): {}'.format(country['country'])
        # # column = 'ws4038tl' #water stress, 2040, rcp8.5, future value, label string
        # # plot_droughts_covered(country, outline, path, 1, main_title, dimensions, column)

        # path = os.path.join(folder_vis, '{}_landslides_uncovered.png'.format(iso3))
        # # if not os.path.exists(path):
        # plot_landslides_uncovered(country, outline, path, dimensions)

        # path = os.path.join(folder_vis, '{}_landslides_covered.png'.format(iso3))
        # # if not os.path.exists(path):
        # plot_landslides_covered(country, outline, path, dimensions)

        # path = os.path.join(folder_vis, '{}_inunriver_uncovered.png'.format(iso3))
        # # if not os.path.exists(path):
        # plot_inunriver_uncovered(country, outline, path, dimensions)

        # path = os.path.join(folder_vis, '{}_inunriver_covered.png'.format(iso3))
        # # if not os.path.exists(path):
        # plot_inunriver_covered(country, outline, path, dimensions)

        # path = os.path.join(folder_vis, '{}_wildfires_uncovered.png'.format(iso3))
        # # if not os.path.exists(path):
        # plot_wildfires_uncovered(country, outline, path, dimensions)

        # path = os.path.join(folder_vis, '{}_wildfires_covered.png'.format(iso3))
        # # if not os.path.exists(path):
        # plot_wildfires_covered(country, outline, path, dimensions)

        # path = os.path.join(folder_vis, '{}_gdp_uncovered_w-background.png'.format(iso3))
        # # if not os.path.exists(path):
        # main_title = 'Uncovered Population and GDP: {}'.format(country['country'])
        # plot_gdp_uncovered(country, outline, path, 1, main_title, dimensions)

        # path = os.path.join(folder_vis, '{}_gdp_uncovered_no-background.png'.format(iso3))
        # main_title = 'GDP: {}'.format(country['country'])
        # plot_gdp_uncovered(country, outline, path, 0, main_title, dimensions)
        # # plot_gdp_demo(country, outline, path)

        # path = os.path.join(folder_vis, '{}_gdp_covered_w-background.png'.format(iso3))
        # # if not os.path.exists(path):
        # main_title = 'Covered Population and GDP: {}'.format(country['country'])
        # plot_gdp_covered(country, outline, path, 1, main_title, dimensions)

        # # print('Complete')
